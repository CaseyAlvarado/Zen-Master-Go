{"name":"Zen-master-go","tagline":"Software Design Final Project","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\r\n\r\n\r\nProject Proposal \r\nPratool Gadtaula and Casey Alvarado\r\n\r\nOur project is a stand-alone, Software Design game.  We will develop a virtual Go game that can have two players: two human or a human and a computer. Go is a game that originated in China 2,500 years ago, it emphasizes balance and judgment.\r\nOur first iteration will include our minimum deliverable that will be comprised of a two-player interactive version of Go with a graphical user interface. Secondly, we will create a basic type of artificial intelligence that the computer would use against a human opponent. This AI will predict the best possible move that the computer could make given that the human opponent makes the best move in their favor. Thirdly, we hope to improve upon our logic strategies with more complex algorithms and further refine the interface of our game.\r\n\r\nWe could go above and beyond the minimum deliverable by incorporating the basics of machine learning into our game. We would allow the computer to make random decisions and play out a game. Based on the previous unsuccessful outcomes, the computer would learn what not to do from its own previous mistakes to play a decent game against a human. Accomplishing and successfully implementing this type of artificial intelligence would be improbable, but this would further our learning objectives of learning new games.\r\n\r\nOur first step is to play Go in order to understand the basic rules and different strategies employed by more experienced players.\r\n\r\nThe biggest problem we foresee is implementing artificial intelligence algorithms to compute the best move for the computer to play. Taking a different approach, another dilemma we envision is comprehending machine learning in order to apply useful procedures that will allow the computer to make better judgements when playing against a human. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}